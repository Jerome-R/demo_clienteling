<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

use Application\Sonata\UserBundle\Entity\User;


/**
 * KpiTriggerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KpiTriggerRepository extends EntityRepository
{
	
	public function getKpiTriggerOfMonthGlobal($date1, $date2){	
		$qb = $this
			->createQueryBuilder('k')
		  	->where('k.date BETWEEN :date1 AND :date2')
		  	->setParameter('date1', $date1)
		  	->setParameter('date2',$date2)
		  	->andWhere('k.niveau = :global')
		  	->setParameter('global', 'TOT')
		;
		
		return $qb
			->getQuery()
			->getOneOrNullResult();
	}

	public function getKpiTriggerOfMonthRM($date1, $date2, $rm){	
		$qb = $this
			->createQueryBuilder('k')
		  	->where('k.date BETWEEN :date1 AND :date2')
		  	->setParameter('date1', $date1)
		  	->setParameter('date2', $date2)
		  	->andWhere('k.niveau = :niveau')
		  	->setParameter('niveau', 'ZON')
		  	->andWhere('k.libelle = :rm')
		  	->setParameter('rm', $rm)
		;
		
		return $qb
			->getQuery()
			->getOneOrNullResult();
	}

	public function getKpiTriggerOfMonth($date1, $date2, $point_vente_desc){	

		$qb = $this
			->createQueryBuilder('k')
		  	->where('k.date BETWEEN :date1 AND :date2')
		  	->setParameter('date1', $date1)
		  	->setParameter('date2', $date2)
		  	->andWhere('k.niveau = :boutique')
		  	->setParameter('boutique', 'BTQ')
		  	->andWhere('k.libelle = :libelle')
		  	->setParameter('libelle', $point_vente_desc)
		;
		
		return $qb
			->getQuery()
			->getOneOrNullResult();
	}

	public function getKpiTriggerOfMonthVDR($date1, $date2, $pdv){	
		$qb = $this
			->createQueryBuilder('k')
		  	->where('k.date BETWEEN :date1 AND :date2')
		  	->setParameter('date1', $date1)
		  	->setParameter('date2', $date2)
		  	->andWhere('k.niveau = :vendeur')
		  	->setParameter('vendeur', 'VDR')
		  	->andWhere('k.libelle = :libelle')
		  	->setParameter('libelle', $pdv)
		;
		
		return $qb
			->getQuery()
			->getResult();
	}

	/************************
	/  CALCUL TOP BOUTIQUE  /
	************************/

	public function getKpiTopBoutique($month, $year, $trigger, $order){
		$monthp1 = $month + 1 ;
		
		$qb = $this
			->createQueryBuilder('k')
		  	->leftJoin('k.user', 'u')
		  	->addSelect('u')
		  	->where('k.date BETWEEN :date1 AND :date2')
		  	->andWhere('k.niveau = :boutique')
		  	->andWhere('k.user != :null')
		  	->setParameter('boutique', 'BTQ')
		  	->setParameter('null', "")
		  	->setParameter('date1', $year.'-'.$month.'-01')
		  	->setParameter('date2', $year.'-'.$monthp1.'-01')
		  	->setMaxResults(20)
		;

		switch ($trigger) {
			case 'AA':
				$qb->orderBy('k.pctCliContactTriggerAA', $order);
				break;
			case 'WP':
				$qb->orderBy('k.pctCliContactTriggerWP', $order);
				break;
			case 'WB':
				$qb->orderBy('k.pctCliContactTriggerWB', $order);
				break;
			
			default:
				# code...
				break;
		}

		return $qb
			->getQuery()
			->getResult();
	}

	public function getKpiTopBoutiqueNative($month, $year, $trigger, $order, $container){
		
		if($month < 12 ){
			$monthp1 = $month + 1 ;
			$yearp1 = $year;
		}
		else{
			$monthp1 = "01" ;
			$yearp1 = $year + 1;
		}

		$pdo = $container->get('app.pdo_connect');
        $pdo = $pdo->initPdoClienteling();       
		
		switch ($trigger) {
			case 'AA':
				//$rsm->addFieldResult('k', 'pctCliContactTriggerAA', 'pct_cli_contact_trigger_AA');
				$sql = 'SELECT k.pct_cli_contact_trigger_AA as pct, GROUP_CONCAT(k.point_vente_desc) as list FROM app_kpi_trigger k WHERE k.nb_cli_tocontact_trigger_AA > 0 AND (k.date BETWEEN "'. $year.'-'.$month.'-01'.'" AND "'. $yearp1.'-'.$monthp1.'-01'.'") AND k.niveau = "BTQ" AND k.user_id IS NOT NULL GROUP BY k.pct_cli_contact_trigger_AA ORDER BY pct_cli_contact_trigger_AA '.$order.' LIMIT 5';
				break;
			case 'WP':
				//$rsm->addFieldResult('k', 'pctCliContactTriggerWP', 'pct_cli_contact_trigger_WP');
				$sql = 'SELECT k.pct_cli_contact_trigger_WP as pct, GROUP_CONCAT(k.point_vente_desc) as list FROM app_kpi_trigger k WHERE k.nb_cli_tocontact_trigger_WP > 0 AND (k.date BETWEEN "'. $year.'-'.$month.'-01'.'" AND "'. $yearp1.'-'.$monthp1.'-01'.'") AND k.niveau = "BTQ" AND k.user_id IS NOT NULL GROUP BY k.pct_cli_contact_trigger_WP ORDER BY pct_cli_contact_trigger_WP '.$order.' LIMIT 5';
				break;
			case 'WB':
				//$rsm->addFieldResult('k', 'pctCliContactTriggerWB', 'pct_cli_contact_trigger_WB');
				$sql = 'SELECT k.pct_cli_contact_trigger_WB as pct, GROUP_CONCAT(k.point_vente_desc) as list FROM app_kpi_trigger k WHERE k.nb_cli_tocontact_trigger_WB > 0 AND (k.date BETWEEN "'. $year.'-'.$month.'-01'.'" AND "'. $yearp1.'-'.$monthp1.'-01'.'") AND k.niveau = "BTQ" AND k.user_id IS NOT NULL GROUP BY k.pct_cli_contact_trigger_WB ORDER BY pct_cli_contact_trigger_WB '.$order.' LIMIT 5';
				break;
			
			default:
				# code...
				break;
		}


        $stmt = $pdo->prepare($sql);
        

		$stmt->execute();

		return $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
	}
}