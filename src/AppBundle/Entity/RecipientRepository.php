<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Application\Sonata\UserBundle\Entity\User;

/**
 * RecipientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipientRepository extends \Doctrine\ORM\EntityRepository
{
	/***************************************/
	/*** Comptages clients par campagnes ***/
	/***************************************/

	// ****       SIEGE & ADMIN       **** //
	/***************************************/
	
	//Get count number of contacted clients for one campaign
	public function getNbContacted(Campaign $campaign)
	{

		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)');

		$qb = $qb->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->andWhere($qb->expr()->isNotNull('r.contactedAt'))
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of clients for one campaign
	public function getTotalRecipientsForCampaign(Campaign $campaign)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt out for one campaign
	public function getNbOptOut(Campaign $campaign)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 0)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt in for one campaign
	public function getNbOptin(Campaign $campaign)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 1)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	/***************************************/
	// ****      RETAIL MANAGER       **** //
	/***************************************/

	public function getNbContactedRm(Campaign $campaign, User $user)
	{

		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)');

		$qb= $qb->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.retailManager = :rm')
			->setParameter('rm', $user->getLibelle())
			->andWhere($qb->expr()->isNotNull('r.contactedAt'))
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of clients for one campaign
	public function getTotalRecipientsForCampaignRm(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.retailManager = :rm')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
	}
	

	//Get count number of opt out for one campaign
	public function getNbOptOutRm(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.retailManager = :rm')
			->andWhere('u.enabled = 1')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 0)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt in for one campaign
	public function getNbOptinRm(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.retailManager = :rm')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 1)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}		//->getResult();


	/***************************************/
	// ****DIRECTEUR**** //
	/***************************************/

	public function getNbContactedDr(Campaign $campaign, User $user)
	{

		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)');

		$qb= $qb->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.directeur = :rm')
			->setParameter('rm', $user->getLibelle())
			->andWhere($qb->expr()->isNotNull('r.contactedAt'))
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt out for one campaign
	public function getNbOptOutDr(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.directeur = :rm')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 0)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of clients for one campaign
	public function getTotalRecipientsForCampaignDr(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.directeur = :rm')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt in for one campaign
	public function getNbOptinDr(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.directeur = :rm')
			->setParameter('rm', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 1)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	/***************************************/
	// ****BOUTIQUE**** //
	/***************************************/

	public function getNbContactedStore(Campaign $campaign, User $user)
	{

		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)');

		$qb= $qb->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.libelle = :libelle')
			->setParameter('libelle', $user->getLibelle())
			->andWhere($qb->expr()->isNotNull('r.contactedAt'))
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt out for one campaign
	public function getNbOptOutStore(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.libelle = :libelle')
			->setParameter('libelle', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 0)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of clients for one campaign
	public function getTotalRecipientsForCampaignStore(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.libelle = :libelle')
			->setParameter('libelle', $user->getLibelle())
			->setParameter('campaign', $campaign)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}

	//Get count number of opt in for one campaign
	public function getNbOptinStore(Campaign $campaign, User $user)
	{
		$qb = $this->createQueryBuilder('r')
			->select('COUNT(r)')
			->where('r.campaign = :campaign')
			->leftJoin('r.user', 'u')
			->andWhere('u.enabled = 1')
			->andWhere('u.libelle = :libelle')
			->setParameter('libelle', $user->getLibelle())
			->setParameter('campaign', $campaign)
			->andWhere('r.optin = :optin')
			->setParameter('optin', 1)
		;

		return $qb
			->getQuery()
			->getSingleScalarResult();
			//->getResult();
	}


	/***************************************/
	/***************************************/

	//Get the selected client of one campaign
	public function getClientCampaign(Campaign $campaign, $client)
	{
		$qb = $this->createQueryBuilder('r')
			->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->andWhere('r.client = :client')
			->setParameter('client', $client)
			->setMaxResults(1)
		;

		/*$qb = $this->createQueryBuilder('r')
			->where('r.campaign = :campaign')
			->getParameter('campaign', $campaign)
			->andWhere('r.client = :client')
			->getParameter('client', $client)
			->setMaxResults(1)
		;*/

		return $qb
			->getQuery()
			->getResult()
			//->getArrayResult()
			;
	}	

	//Get clients for one campaign
	public function getClientsForCampaign(array $options)
	{
		$fullname 		= $options['fullname'];
		$local 			= $options['local'];
		$filters 		= $options['filters'];
		$retailManager	= $options['rm'];
		$directeur 		= $options['dr'];
		$libelleBoutiqueRattachement			= $options['libelleBoutiqueRattachement'];
		$codevendeur		= $options['codevendeur'];
		$campaign 		= $options['campaign'];

		if($fullname != null && $fullname != "")
			$name = explode( " ", $fullname);
		else
			$name = "";

		$qb = $this->createQueryBuilder('r')
			->leftJoin('r.client', 'c')
			->addSelect('c')
	        ->leftJoin('r.dataRecipient', 'd')
			->addSelect('d')
			->where('r.optin = :val')
			->setParameter('val', 1)
			->andWhere('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->orderBy('d.dateEntree', 'ASC')
			->addOrderBy('r.id', 'ASC')
		;

		switch($local) {
			case "f":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			case "t":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			default:
			break;
		}
		
		if($name != ""){

			$condition = "";

			foreach ($name as $key => $val) {
				if($key == 0)
					$condition = '(c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
				else
					$condition .= 'AND (c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
			}

			if ($condition != "")
				$qb->andWhere($condition);

			foreach ($name as $key => $val) {
				$qb->setParameter(':val'.$key, "%".$val."%");
			}
		}

		if($codevendeur != ""){
			$qb->andWhere('d.codevendeur LIKE :codevendeur');
			$qb->setParameter(':codevendeur', '%'.$codevendeur.'%');
		}

		return $qb
			->getQuery();
			//->getResult();
	}	

	public function getClientsOfTheStore(array $options)    
	{
		$fullname 		= $options['fullname'];
		$local 			= $options['local'];
		$filters 		= $options['filters'];
		$retailManager	= $options['rm'];
		$directeur 		= $options['dr'];
		$libelleBoutiqueRattachement			= $options['libelleBoutiqueRattachement'];
		$codevendeur		= $options['codevendeur'];
		$campaign 		= $options['campaign'];

		if($fullname != null && $fullname != "")
			$name = explode( " ", $fullname);
		else
			$name = "";

		$qb = $this->createQueryBuilder('r')
	        ->leftJoin('r.client', 'c')
			->addSelect('c')
	        ->leftJoin('r.dataRecipient', 'd')
			->addSelect('d')
			->where('r.optin = :val')
			->setParameter('val', 1)
			->andwhere('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
	        ->andWhere('d.libelleBoutiqueAchat = :store')
	        ->setParameter('store', $libelleBoutiqueRattachement)
	        ->orderBy('d.dateEntree', 'ASC')
	        ->addOrderBy('r.id', 'ASC')
	    ;

		switch($local) {
			case "f":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			case "t":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			default:
			break;
		}

	    if($name != ""){

			$condition = "";

			foreach ($name as $key => $val) {
				if($key == 0)
					$condition = '(c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
				else
					$condition .= 'AND (c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
			}

			if ($condition != "")
				$qb->andWhere($condition);

			foreach ($name as $key => $val) {
				$qb->setParameter(':val'.$key, "%".$val."%");
			}
		}

		if($codevendeur != ""){
			$qb->andWhere('d.codevendeur LIKE :codevendeur');
			$qb->setParameter(':codevendeur', '%'.$codevendeur.'%');
		}
	 
		return $qb->getQuery();
	      //->getArrayResult();
			//->getResult();
	}

	public function getClientsOfTheDirector(array $options)    
	{
		$fullname 		= $options['fullname'];
		$local 			= $options['local'];
		$filters 		= $options['filters'];
		$retailManager	= $options['rm'];
		$directeur 		= $options['dr'];
		$libelleBoutiqueRattachement			= $options['libelleBoutiqueRattachement'];
		$codevendeur		= $options['codevendeur'];
		$campaign 		= $options['campaign'];
		
		if($fullname != null && $fullname != "")
			$name = explode( " ", $fullname);
		else
			$name = "";

		$qb = $this->createQueryBuilder('r')
	        ->leftJoin('r.client', 'c')
			->addSelect('c')
	        ->leftJoin('r.dataRecipient', 'd')
			->addSelect('d')
			->where('r.optin = :val')
			->setParameter('val', 1)
			->andwhere('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
			->leftJoin('r.user', 'u')
	        ->addSelect('u')
	        ->andWhere('u.directeur = :directeur')
			->andWhere('u.enabled = 1')
			->setParameter('directeur', $directeur)
	        ->orderBy('d.dateEntree', 'ASC')
	        ->addOrderBy('r.id', 'ASC')
	        ;

		switch($local) {
			case "f":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			case "t":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			default:
			break;
		}
		
	    if($name != ""){

			$condition = "";

			foreach ($name as $key => $val) {
				if($key == 0)
					$condition = '(c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
				else
					$condition .= 'AND (c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
			}

			if ($condition != "")
				$qb->andWhere($condition);

			foreach ($name as $key => $val) {
				$qb->setParameter(':val'.$key, "%".$val."%");
			}
		}

		if($codevendeur != ""){
			$qb->andWhere('d.codevendeur LIKE :codevendeur');
			$qb->setParameter(':codevendeur', '%'.$codevendeur.'%');
		}
	 
		return $qb->getQuery();
	      //->getArrayResult();
			//->getResult();
	}

	public function getClientsOfTheRm(array $options)    
	{
		$fullname 		= $options['fullname'];
		$local 			= $options['local'];
		$filters 		= $options['filters'];
		$retailManager	= $options['rm'];
		$directeur 		= $options['dr'];
		$libelleBoutiqueRattachement			= $options['libelleBoutiqueRattachement'];
		$codevendeur		= $options['codevendeur'];
		$campaign 		= $options['campaign'];
		
		if($fullname != null && $fullname != "")
			$name = explode( " ", $fullname);
		else
			$name = "";

		$qb = $this->createQueryBuilder('r')
			->where('r.campaign = :campaign')
			->setParameter('campaign', $campaign)
	        ->leftJoin('r.client', 'c')
			->addSelect('c')
	        ->leftJoin('r.dataRecipient', 'd')
			->addSelect('d')
			->andWhere('r.optin = :val')
			->setParameter('val', 1)
	        //->andWhere('d.libelleBoutiqueAchat = :store')
	        //->setParameter('store', $libelleBoutiqueRattachement)
	        ->leftJoin('r.user', 'u')
	        ->addSelect('u')
	        ->andWhere('u.retailManager = :retailManager')
			->andWhere('u.enabled = 1')
	        ->setParameter('retailManager', $retailManager)
	        ->orderBy('d.dateEntree', 'ASC')
	        ->addOrderBy('r.id', 'ASC')
	        ;

		switch($local) {
			case "f":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			case "t":
			$qb ->andWhere('c.local = :local')
		        ->setParameter(':local', $local)
		        ;
			break;
			default:
			break;
		}
		
	    if($name != ""){

			$condition = "";

			foreach ($name as $key => $val) {
				if($key == 0)
					$condition = '(c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
				else
					$condition .= 'AND (c.nom LIKE :val'.$key.' OR c.prenom LIKE :val'.$key.' ) ';
			}

			if ($condition != "")
				$qb->andWhere($condition);

			foreach ($name as $key => $val) {
				$qb->setParameter(':val'.$key, "%".$val."%");
			}
		}

		if($codevendeur != ""){
			$qb->andWhere('d.codevendeur LIKE :codevendeur');
			$qb->setParameter(':codevendeur', '%'.$codevendeur.'%');
		}
	 
		return $qb->getQuery();
	        //->getArrayResult();
			//->getResult();
	}
}
